/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Core Printing
 #	author : miyako
 #	2014/11/17
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#define PMPageFormatCurrent (PMPageFormat)PA_GetCarbonPageFormat()
#define PMPrintSettingsCurrent (PMPrintSettings)PA_GetCarbonPrintSettings()

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Page Format

		case 1 :
			CP_Get_orientation(pResult, pParams);
			break;

		case 2 :
			CP_SET_ORIENTATION(pResult, pParams);
			break;

		case 3 :
			CP_Get_scale(pResult, pParams);
			break;

		case 4 :
			CP_SET_SCALE(pResult, pParams);
			break;

// --- Print Settings

		case 5 :
			CP_Get_copies(pResult, pParams);
			break;

		case 6 :
			CP_SET_COPIES(pResult, pParams);
			break;

		case 7 :
			CP_Get_first_page(pResult, pParams);
			break;

		case 8 :
			CP_SET_FIRST_PAGE(pResult, pParams);
			break;

		case 9 :
			CP_get_last_page(pResult, pParams);
			break;

		case 10 :
			CP_SET_LAST_PAGE(pResult, pParams);
			break;

		case 11 :
			CP_get_job_name(pResult, pParams);
			break;

		case 12 :
			CP_SET_JOB_NAME(pResult, pParams);
			break;

		case 13 :
			CP_get_duplex(pResult, pParams);
			break;

		case 14 :
			CP_SET_DUPLEX(pResult, pParams);
			break;

		case 15 :
			CP_get_collate(pResult, pParams);
			break;

		case 16 :
			CP_SET_COLLATE(pResult, pParams);
			break;

// --- Printer

		case 17 :
			CP_GET_PRINTER_LIST(pResult, pParams);
			break;

		case 18 :
			CP_get_default_printer(pResult, pParams);
			break;

		case 19 :
			CP_SET_DEFAULT_PRINTER(pResult, pParams);
			break;

		case 20 :
			CP_get_printer_state(pResult, pParams);
			break;

// --- XML

		case 21 :
			CP_XML_Get_page_format(pResult, pParams);
			break;

		case 22 :
			CP_XML_Get_print_settings(pResult, pParams);
			break;

		case 23 :
			CP_XML_SET_PAGE_FORMAT(pResult, pParams);
			break;

		case 24 :
			CP_XML_SET_PRINT_SETTINGS(pResult, pParams);
			break;

	}
}

void CP_Get_orientation(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    PMOrientation orientation;
    if(PMGetOrientation(PMPageFormatCurrent, &orientation) == noErr)
        returnValue.setIntValue(orientation);
    
    returnValue.setReturn(pResult);
}

void CP_SET_ORIENTATION(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    PMOrientation orientation = Arg1.getIntValue();
    PMSetOrientation(PMPageFormatCurrent, orientation, kPMUnlocked);
}

void CP_Get_scale(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_REAL returnValue;
    
    double scale;
    if(PMGetScale(PMPageFormatCurrent, &scale) == noErr)
        returnValue.setDoubleValue(scale);
    
    returnValue.setReturn(pResult);
}

void CP_SET_SCALE(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_REAL Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    double scale = Arg1.getDoubleValue();
    PMSetScale(PMPageFormatCurrent, scale);
}

// -------------------------------- Print Settings --------------------------------


void CP_Get_copies(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    UInt32 copies;
    if(PMGetCopies(PMPrintSettingsCurrent, &copies) == noErr)
        returnValue.setIntValue(copies);
    
    returnValue.setReturn(pResult);
}

void CP_SET_COPIES(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    UInt32 copies = Arg1.getIntValue();
    PMSetCopies(PMPrintSettingsCurrent, copies, kPMUnlocked);	
}

void CP_Get_first_page(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    UInt32 first;
    if(PMGetFirstPage(PMPrintSettingsCurrent, &first) == noErr)
        returnValue.setIntValue(first);
    
    returnValue.setReturn(pResult);
}

void CP_SET_FIRST_PAGE(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    UInt32 first = Arg1.getIntValue();
    PMSetFirstPage(PMPrintSettingsCurrent, first, kPMUnlocked);
}

void CP_get_last_page(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    UInt32 last;
    if(PMGetLastPage(PMPrintSettingsCurrent, &last) == noErr)
        returnValue.setIntValue(last);
    
    returnValue.setReturn(pResult);
}

void CP_SET_LAST_PAGE(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    UInt32 last = Arg1.getIntValue();
    PMSetLastPage(PMPrintSettingsCurrent, last, kPMUnlocked);
}

void CP_get_job_name(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT returnValue;
    
    CFStringRef job;
    if(PMPrintSettingsGetJobName(PMPrintSettingsCurrent, &job) == noErr)
        returnValue.setUTF16String((NSString *)job);
    
    returnValue.setReturn(pResult);
}

void CP_SET_JOB_NAME(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    CFStringRef job = (CFStringRef)Arg1.copyUTF16String();
    PMPrintSettingsSetJobName(PMPrintSettingsCurrent, job);
    CFRelease(job);
}

void CP_get_duplex(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    PMDuplexMode duplex;
    if(PMGetDuplex(PMPrintSettingsCurrent, &duplex) == noErr)
        returnValue.setIntValue(duplex);
    
    returnValue.setReturn(pResult);
}

void CP_SET_DUPLEX(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    PMDuplexMode duplex = Arg1.getIntValue();
    PMSetDuplex(PMPrintSettingsCurrent, duplex);
}

void CP_get_collate(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT returnValue;
    
    Boolean collate;
    if(PMGetCollate(PMPrintSettingsCurrent, &collate) == noErr)
        returnValue.setIntValue(collate);
    
    returnValue.setReturn(pResult);
}

void CP_SET_COLLATE(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    Boolean collate = Arg1.getIntValue();
    PMSetCollate(PMPrintSettingsCurrent, collate);
}

// ------------------------------------ Printer -----------------------------------


void CP_GET_PRINTER_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
    ARRAY_TEXT Arg1;
    ARRAY_TEXT Arg2;
    
    CFArrayRef printers;
    
    Arg1.setSize(1);
    Arg2.setSize(1);
    
    if(PMServerCreatePrinterList(kPMServerLocal, &printers) == noErr)
    {		
        int i, count;
        
        count = CFArrayGetCount(printers);
        
        for(i = 0; i < count; i++)
        {
            Arg1.appendUTF16String((NSString *)PMPrinterGetID((PMPrinter)CFArrayGetValueAtIndex(printers, i)));
            Arg2.appendUTF16String((NSString *)PMPrinterGetName((PMPrinter)CFArrayGetValueAtIndex(printers, i)));
        }
        CFRelease(printers);
    }
    
    Arg1.toParamAtIndex(pParams, 1);
    Arg2.toParamAtIndex(pParams, 2);
}

void CP_get_default_printer(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT returnValue;
    
    CFArrayRef printers;
    
    if(PMServerCreatePrinterList(kPMServerLocal, &printers) == noErr)
    {	
        int i, count;
        
        count = CFArrayGetCount(printers);
        
        for(i = 0; i < count; i++)
        {
            if(PMPrinterIsDefault((PMPrinter)CFArrayGetValueAtIndex(printers, i)))
            {
                returnValue.setUTF16String((NSString *)PMPrinterGetID((PMPrinter)CFArrayGetValueAtIndex(printers, i)));
                break;			
            }
        }
        CFRelease(printers);		
    }
    
    returnValue.setReturn(pResult);
}

void CP_SET_DEFAULT_PRINTER(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Arg1;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    NSString *printer =	Arg1.copyUTF16String();
    
    CFArrayRef printers;
    
    if(PMServerCreatePrinterList(kPMServerLocal, &printers) == noErr)
    {	
        int i, count;
        
        count = CFArrayGetCount(printers);
        
        for(i = 0; i < count; i++)
        {
            if([printer isEqualToString:(NSString *)PMPrinterGetID((PMPrinter)CFArrayGetValueAtIndex(printers, i))])
            {
                PMPrinterSetDefault((PMPrinter)CFArrayGetValueAtIndex(printers, i));
                break;				
            }
        }
        CFRelease(printers);		
    }
    [printer release];
}

void CP_get_printer_state(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Arg1;
    C_LONGINT returnValue;
    
    Arg1.fromParamAtIndex(pParams, 1);
    
    NSString *printer =	Arg1.copyUTF16String();
    
    CFArrayRef printers;
    
    if(PMServerCreatePrinterList(kPMServerLocal, &printers) == noErr)
    {	
        int i, count;
        
        count = CFArrayGetCount(printers);
        
        for(i = 0; i < count; i++)
        {
            if([printer isEqualToString:(NSString *)PMPrinterGetID((PMPrinter)CFArrayGetValueAtIndex(printers, i))])
            {
                PMPrinterState state;
                PMPrinterGetState((PMPrinter)CFArrayGetValueAtIndex(printers, i), &state);
                returnValue.setIntValue(state);	
                break;				
            }
        }
        CFRelease(printers);
    }	
    [printer release];
    
    returnValue.setReturn(pResult);
}

// -------------------------------------- XML -------------------------------------


void CP_XML_Get_page_format(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT returnValue;
    
    NSData *data = nil;
    PMPageFormatCreateDataRepresentation(PMPageFormatCurrent, (CFDataRef *)&data, kPMDataFormatXMLMinimal);
    
    if(data){
        NSString *xml = [[NSString alloc]initWithBytes:[data bytes] length:[data length] encoding:NSUTF8StringEncoding];
        returnValue.setUTF16String(xml);
        [xml release];
    }
    
    returnValue.setReturn(pResult);
}

void CP_XML_Get_print_settings(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT returnValue;
    
    NSData *data = nil;
    
    PMPrintSettingsCreateDataRepresentation(PMPrintSettingsCurrent, (CFDataRef *)&data, kPMDataFormatXMLMinimal);
    
    if(data){
        NSString *xml = [[NSString alloc]initWithBytes:[data bytes] length:[data length] encoding:NSUTF8StringEncoding];
        returnValue.setUTF16String(xml);
        [xml release];
    }
    
    
    returnValue.setReturn(pResult);
}

void CP_XML_SET_PAGE_FORMAT(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSString *xml = Param1.copyUTF16String();
    
    NSData *data = [xml dataUsingEncoding:(NSStringEncoding)NSUTF8StringEncoding];
    if(data){
        PMPageFormat newPrintFormat;
        PMPageFormatCreateWithDataRepresentation((CFDataRef)data, &newPrintFormat);
        PMPageFormat oldPrintFormat = (PMPageFormat)PA_GetCarbonPageFormat();	
        if(oldPrintFormat)
            PMCopyPageFormat(newPrintFormat, oldPrintFormat);
    }
}

void CP_XML_SET_PRINT_SETTINGS(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT Param1;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSString *xml = Param1.copyUTF16String();
    
    NSData *data = [xml dataUsingEncoding:(NSStringEncoding)NSUTF8StringEncoding];
    if(data){
        PMPrintSettings newPrintSettings;
        PMPrintSettingsCreateWithDataRepresentation((CFDataRef)data, &newPrintSettings);
        PMPrintSettings oldPrintSettings = (PMPrintSettings)PA_GetCarbonPrintSettings();	
        if(oldPrintSettings)
            PMCopyPrintSettings(newPrintSettings, oldPrintSettings);
    }
}
